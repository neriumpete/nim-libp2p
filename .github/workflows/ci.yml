name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: linux
            cpu: amd64
          - os: linux
            cpu: i386
          - os: linux-gcc-14
            cpu: amd64
          - os: macos
            cpu: amd64
          - os: macos-14
            cpu: arm64
          - os: windows
            cpu: amd64
        nim:
          - ref: version-1-6
            memory_management: refc
          - ref: version-2-0
            memory_management: refc
        include:
          - platform:
              os: linux
            builder: ubuntu-22.04
            shell: bash
          - platform:
              os: linux-gcc-14
            builder: ubuntu-24.04
            shell: bash
          - platform:
              os: macos
            builder: macos-13
            shell: bash
          - platform:
              os: macos-14
            builder: macos-14
            shell: bash
          - platform:
              os: windows
            builder: windows-2022
            shell: msys2 {0}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    name: '${{ matrix.platform.os }}-${{ matrix.platform.cpu }} (Nim ${{ matrix.nim.ref }})'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Nim
        uses: "./.github/actions/install_nim"
        with:
          os: ${{ matrix.platform.os }}
          cpu: ${{ matrix.platform.cpu }}
          shell: ${{ matrix.shell }}
          nim_ref: ${{ matrix.nim.ref }}

      # Restore p2pd from cache
      - name: Restore p2pd from cache
        id: p2pd-cache
        uses: actions/cache@v3
        with:
          path: .ci-bin
          key: p2pd-${{ matrix.platform.os }}-${{ matrix.platform.cpu }}-v0.9.1-4

      # For most platforms - use pre-built binaries
      - name: Download pre-built p2pd binary
        if: steps.p2pd-cache.outputs.cache-hit != 'true' && !(matrix.platform.os == 'macos-14' && matrix.platform.cpu == 'arm64')
        run: |
          mkdir -p .ci-bin
          
          # Determine binary URL and download appropriate file
          if [[ "${{ matrix.platform.os }}" == windows* ]]; then
            if [ "${{ matrix.platform.cpu }}" = "amd64" ]; then
              curl -fsSL -o "p2pd.zip" "https://github.com/libp2p/go-libp2p-daemon/releases/download/v0.9.1/p2pd-v0.9.1-win32-amd64.zip"
              unzip -o "p2pd.zip"
              
              # Handle Windows binary path
              find . -name "*.exe" -type f
              if [ -f "bin/p2pd-win32-amd64.exe" ]; then
                cp "bin/p2pd-win32-amd64.exe" .ci-bin/p2pd.exe
              else
                # Find any exe
                EXE_PATH=$(find . -name "*.exe" -type f | head -1)
                if [ -n "$EXE_PATH" ]; then
                  cp "$EXE_PATH" .ci-bin/p2pd.exe
                else
                  echo "No exe found in zip!"
                  exit 1
                fi
              fi
            fi
            
          elif [[ "${{ matrix.platform.os }}" == macos* ]]; then
            if [ "${{ matrix.platform.cpu }}" = "amd64" ]; then
              curl -fsSL -o "p2pd.tar.gz" "https://github.com/libp2p/go-libp2p-daemon/releases/download/v0.9.1/p2pd-v0.9.1-darwin.tar.gz"
              mkdir -p extract_temp
              cd extract_temp
              tar -xf "../p2pd.tar.gz"
              find . -type f -not -name "*.md" -not -name "LICENSE"
              BINARY=$(find . -type f -executable | head -1)
              if [ -n "$BINARY" ]; then
                cp "$BINARY" ../.ci-bin/p2pd
              else
                echo "No executable binary found in tarball!"
                exit 1
              fi
              cd ..
            fi
            
          else # Linux
            if [ "${{ matrix.platform.cpu }}" = "amd64" ]; then
              curl -fsSL -o "p2pd.tar.gz" "https://github.com/libp2p/go-libp2p-daemon/releases/download/v0.9.1/p2pd-v0.9.1-linux-amd64.tar.gz"
              mkdir -p extract_temp
              cd extract_temp
              tar -xf "../p2pd.tar.gz"
              find . -type f -not -name "*.md" -not -name "LICENSE"
              BINARY=$(find . -type f -executable | head -1)
              if [ -n "$BINARY" ]; then
                cp "$BINARY" ../.ci-bin/p2pd
              else
                echo "No executable binary found in tarball!"
                exit 1
              fi
              cd ..
            elif [ "${{ matrix.platform.cpu }}" = "i386" ]; then
              curl -fsSL -o "p2pd.tar.gz" "https://github.com/libp2p/go-libp2p-daemon/releases/download/v0.9.1/p2pd-v0.9.1-linux-386.tar.gz"
              mkdir -p extract_temp
              cd extract_temp
              tar -xf "../p2pd.tar.gz"
              find . -type f -not -name "*.md" -not -name "LICENSE"
              BINARY=$(find . -type f -executable | head -1)
              if [ -n "$BINARY" ]; then
                cp "$BINARY" ../.ci-bin/p2pd
              else
                echo "No executable binary found in tarball!"
                exit 1
              fi
              cd ..
            fi
          fi
          
          # Set executable permissions for Unix systems
          if [[ "${{ matrix.platform.os }}" != windows* ]]; then
            chmod +x .ci-bin/p2pd
            ls -la .ci-bin/
          fi
          
          # Create wrapper script - IMPORTANT to match expected behavior
          if [[ "${{ matrix.platform.os }}" == windows* ]]; then
            # Windows wrapper (batch file)
            cat > .ci-bin/p2pd-wrapper.bat << 'EOF'
            @echo off
            echo Running p2pd: %*
            "%~dp0p2pd.exe" %*
            EOF
            mv .ci-bin/p2pd-wrapper.bat .ci-bin/p2pd.bat
          else
            # Unix wrapper (bash script)
            mv .ci-bin/p2pd .ci-bin/p2pd.real
            cat > .ci-bin/p2pd << 'EOF'
            #!/bin/bash
            # Wrapper script to ensure p2pd is called correctly
            SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
            exec "$SCRIPT_DIR/p2pd.real" "$@"
            EOF
            chmod +x .ci-bin/p2pd
          fi
          
          # Add to PATH
          echo "${{ github.workspace }}/.ci-bin" >> $GITHUB_PATH
          export PATH="${{ github.workspace }}/.ci-bin:$PATH"
          
          # Verify installation
          if [[ "${{ matrix.platform.os }}" == windows* ]]; then
            .ci-bin/p2pd.exe --version || echo "p2pd version check failed"
          else
            .ci-bin/p2pd --version || echo "p2pd version check failed"
          fi

      # Only build from source for macOS arm64
      - name: Setup Go for macOS arm64
        if: (matrix.platform.os == 'macos-14' && matrix.platform.cpu == 'arm64' && steps.p2pd-cache.outputs.cache-hit != 'true')
        uses: actions/setup-go@v5
        with:
          go-version: '~1.16.0'

      - name: Build p2pd from source for macOS arm64
        if: (matrix.platform.os == 'macos-14' && matrix.platform.cpu == 'arm64' && steps.p2pd-cache.outputs.cache-hit != 'true')
        run: |
          mkdir -p .ci-bin
          
          # Build from source
          echo "Building p2pd from source for macOS arm64..."
          V=1 bash scripts/build_p2pd.sh p2pdCache 124530a3
          
          # Find the binary
          if [ -f "p2pd" ]; then
            cp p2pd .ci-bin/p2pd.real
          elif [ -f "p2pdCache/p2pd" ]; then
            cp p2pdCache/p2pd .ci-bin/p2pd.real
          else
            P2PD_PATH=$(find . -name "p2pd" -type f | grep -v "\.proto\|\.go" | head -1)
            if [ -n "$P2PD_PATH" ]; then
              cp "$P2PD_PATH" .ci-bin/p2pd.real
            else
              echo "ERROR: p2pd binary not found after build!"
              exit 1
            fi
          fi
          
          # Create a wrapper script
          cat > .ci-bin/p2pd << 'EOF'
          #!/bin/bash
          # Wrapper script to ensure p2pd is called correctly
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          exec "$SCRIPT_DIR/p2pd.real" "$@"
          EOF
          
          chmod +x .ci-bin/p2pd.real
          chmod +x .ci-bin/p2pd
          
          # Add to PATH
          echo "${{ github.workspace }}/.ci-bin" >> $GITHUB_PATH
          export PATH="${{ github.workspace }}/.ci-bin:$PATH"
          
          # Verify installation
          .ci-bin/p2pd --version || echo "p2pd version check failed"

      # Verify p2pd is in PATH for all methods
      - name: Verify p2pd installation
        run: |
          echo "Setting PATH:"
          echo "${{ github.workspace }}/.ci-bin" >> $GITHUB_PATH
          export PATH="${{ github.workspace }}/.ci-bin:$PATH"
          
          echo "Verifying p2pd installation:"
          if [[ "${{ matrix.platform.os }}" == windows* ]]; then
            which p2pd.exe || echo "p2pd not found in PATH!"
            .ci-bin/p2pd.exe --version || echo "p2pd version check failed"
          else
            which p2pd || echo "p2pd not found in PATH!"
            .ci-bin/p2pd --version || echo "p2pd version check failed"
          fi

      # Rest of the CI steps
      - name: Restore deps from cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: nimbledeps
          key: nimbledeps-${{ matrix.nim.ref }}-${{ matrix.builder }}-${{ matrix.platform.cpu }}-${{ hashFiles('.pinned') }}

      - name: Setup python
        run: |
          mkdir -p .venv
          python -m venv .venv

      - name: Install deps
        if: ${{ steps.deps-cache.outputs.cache-hit != 'true' }}
        run: |
          source .venv/bin/activate
          nimble install_pinned

      - name: Use gcc 14
        if: ${{ matrix.platform.os == 'linux-gcc-14' }}
        run: |
          # Add GCC-14 to alternatives
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 14
          # Set GCC-14 as the default
          sudo update-alternatives --set gcc /usr/bin/gcc-14

      - name: Run tests
        run: |
          source .venv/bin/activate
          
          # Display versions
          nim --version
          nimble --version
          gcc --version
          
          # Debugging before tests run
          echo "PATH: $PATH"
          if [[ "${{ matrix.platform.os }}" == windows* ]]; then
            which p2pd.exe || echo "p2pd not found in PATH!"
            .ci-bin/p2pd.exe --version || echo "p2pd version check failed"
          else
            which p2pd || echo "p2pd not found in PATH!"
            .ci-bin/p2pd --version || echo "p2pd version check failed"
          fi
          
          # Run tests
          NIMFLAGS="${NIMFLAGS} --mm:${{ matrix.nim.memory_management }}"
          nimble test
